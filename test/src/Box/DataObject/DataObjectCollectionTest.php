<?php

namespace Box;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-03-08 at 15:09:08.
 */
class DataObjectCollectionTest extends \PHPUnit_Framework_TestCase implements DataObjectInterface {
	
	/**
	 * @covers Box\DataObjectCollection::__construct
	 */
	public function testConstruct() {
		$docEmpty = new DataObjectCollection();
		$this->assertTrue($docEmpty instanceof DataObjectCollection);
		
		$dos = array(
			new self(),
			new self(),
			new self(),
		);
		
		$doc = new DataObjectCollection($dos);
		$this->assertCount(3, $doc);
		
		return $docEmpty;
	}
	
	/**
	 * @covers Box\DataObjectCollection::add
	 */
	public function testAdd() {
		$doc = new DataObjectCollection();
		$doc->add($this);
		$this->assertCount(1, $doc);
		return $doc;
	}
	
	/**
	 * @covers Box\DataObjectCollection::get
	 * @depends testAdd
	 */
	public function testGet(DataObjectCollection $doc) {
		$this->assertTrue($doc->get(0) instanceof self);
		$this->assertNull($doc->get(1));
	}
	
	/**
	 * @covers Box\DataObjectCollection::addAll
	 */
	public function testAddAll() {
		$doc = new DataObjectCollection();
		$dos = array(
			new self(),
			new self(),
			new self(),
		);
		$doc->addAll($dos);
		$this->assertCount(3, $doc);
		return $doc;
	}

	/**
	 * @covers Box\DataObjectCollection::getAll
	 * @depends testAddAll
	 */
	public function testGetAll(DataObjectCollection $doc) {
		$dos = $doc->getAll();
		$this->assertCount(3, $doc);
		foreach ($dos as $do) {
			$this->assertTrue($do instanceof $this);
		}
	}
	
	/**
	 * @covers Box\DataObjectCollection::count
	 * @depends testAddAll
	 */
	public function testCount(DataObjectCollection $doc) {
		$this->assertCount(3, $doc);
	}
	
	/**
	 * @covers Box\DataObjectCollection::getIterator
	 * @depends testAddAll
	 */
	public function testGetIterator(DataObjectCollection $doc) {
		$it = $doc->getIterator();
		$this->assertTrue($it instanceof \Iterator);
		$this->assertCount(3, $it);
	}
	
	/**
	 * @covers Box\DataObjectCollection::getIds
	 * @depends testAddAll
	 */
	public function testGetIds(DataObjectCollection $doc) {
		$this->assertCount(0, $doc->getIds());
		$doc->get(0)->setId(1);
		$this->assertCount(1, $doc->getIds());
	}
	
	private $_id;

	public function getId() {
		return $this->_id;
	}

	public function setId($id) {
		$this->_id = $id;
		return $this;
	}

	public function toData() {
		return new Data(array('id' => $this->_id));
	}

	public static function fromData(array &$data) {
		$do = new self();
		return $do->setId($data['id']);
	}
}
