<?php
namespace Box;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-03-08 at 15:09:06.
 */
class QueryTest extends \PHPUnit_Framework_TestCase implements DataObjectInterface {
	/**
	 * @var Query
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = Query::create($this);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
	}

	/**
	 * @covers Box\Query::create
	 */
	public function testCreate() {
		$this->assertTrue(Query::create($this) instanceof Query);
	}

	/**
	 * @covers Box\Query::getToken
	 */
	public function testGetToken() {
		$this->assertTrue($this->object->getToken() instanceof TokenRoot);
	}

	/**
	 * @covers Box\Query::contains
	 */
	public function testContains() {
		$this->assertTrue($this->object->contains('property', 'value', true) instanceof QueryOperation);
		$this->assertTrue($this->object->contains('property', 'value', false) instanceof QueryOperation);
	}

	/**
	 * @covers Box\Query::endsWith
	 */
	public function testEndsWith() {
		$this->assertTrue($this->object->endsWith('property', 'value', true) instanceof QueryOperation);
		$this->assertTrue($this->object->endsWith('property', 'value', false) instanceof QueryOperation);
	}

	/**
	 * @covers Box\Query::startsWith
	 */
	public function testStartsWith() {
		$this->assertTrue($this->object->startsWith('property', 'value', true) instanceof QueryOperation);
		$this->assertTrue($this->object->startsWith('property', 'value', false) instanceof QueryOperation);
	}

	/**
	 * @covers Box\Query::equals
	 */
	public function testEquals() {
		$this->assertTrue($this->object->equals('property', 'value') instanceof QueryOperation);
		$this->assertTrue($this->object->equals('property2', 42) instanceof QueryOperation);
	}

	/**
	 * @covers Box\Query::notEquals
	 */
	public function testNotEquals() {
		$this->assertTrue($this->object->notEquals('property', 'value') instanceof QueryOperation);
		$this->assertTrue($this->object->notEquals('property2', 42) instanceof QueryOperation);
	}

	/**
	 * @covers Box\Query::greaterThan
	 */
	public function testGreaterThan() {
		$this->assertTrue($this->object->greaterThan('property', 42) instanceof QueryOperation);
		$this->assertTrue($this->object->greaterThan('property2', 42.42) instanceof QueryOperation);
	}

	/**
	 * @covers Box\Query::greaterThanOrEquals
	 */
	public function testGreaterThanOrEquals() {
		$this->assertTrue($this->object->greaterThanOrEquals('property', 42) instanceof QueryOperation);
		$this->assertTrue($this->object->greaterThanOrEquals('property2', 42.42) instanceof QueryOperation);
	}

	/**
	 * @covers Box\Query::lessThan
	 */
	public function testLessThan() {
		$this->assertTrue($this->object->lessThan('property', 42) instanceof QueryOperation);
		$this->assertTrue($this->object->lessThan('property2', 42.42) instanceof QueryOperation);
	}

	/**
	 * @covers Box\Query::lessThanOrEquals
	 * @todo   Implement testLessThanOrEquals().
	 */
	public function testLessThanOrEquals() {
		$this->assertTrue($this->object->lessThanOrEquals('property', 42) instanceof QueryOperation);
		$this->assertTrue($this->object->lessThanOrEquals('property2', 42.42) instanceof QueryOperation);
	}

	/**
	 * @covers Box\Query::in
	 */
	public function testIn() {
		$this->assertTrue($this->object->in('property', array(42)) instanceof QueryOperation);
		$this->assertTrue($this->object->in('property2', array()) instanceof QueryOperation);
	}

	/**
	 * @covers Box\Query::notIn
	 * @todo   Implement testNotIn().
	 */
	public function testNotIn() {
		$this->assertTrue($this->object->notIn('property', array(42)) instanceof QueryOperation);
		$this->assertTrue($this->object->notIn('property2', array()) instanceof QueryOperation);
	}

	/**
	 * Set the id.
	 *
	 * @param integer $id
	 */
	public function setId($id) {
		return;
	}

	/**
	 * Get the id
	 *
	 * @return integer|null
	 */
	public function getId() {
		return 42;
	}

	/**
	 * Turn this instance into a storable data package.
	 *
	 * @return Data
	 */
	public function toData() {
		return new Data();
	}

	/**
	 * Populate this instance or create a new populated instance from data.
	 *
	 * @param array   &$data Data in key => value form.
	 * @param boolean $new   Create a new instance.
	 *
	 * @return static
	 */
	public function fromData(array &$data, $new = true) {
		return $this;
	}
}
