<?php

namespace Box;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-03-08 at 15:09:11.
 */
class StoreStaticTest extends \PHPUnit_Framework_TestCase implements DataObjectInterface {

	/** @var StoreStatic */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new StoreStatic();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}
	
	/**
	 * @covers Box\StoreStatic::persist
	 */
	public function testPersist() {
		$this->assertNull($this->object->persist($this));
		$this->assertEquals(1, $this->getId());
		$this->setId(2);
		$this->assertNull($this->object->persist($this));
		$this->assertEquals(2, $this->getId());
	}
	
	/**
	 * @covers Box\StoreStatic::get
	 */
	public function testGet() {
		$this->setId(null);
		$this->object->persist($this);
		$do = $this->object->get(Query::create($this)->equals('id', $this->getId()));
		$this->assertNotNull($do);
		$this->assertEquals($this->getId(), $do->getId());
	}

	/**
	 * @covers Box\StoreStatic::count
	 */
	public function testCount() {
		$count = $this->object->count(Query::create($this));
		$this->assertInternalType('integer', $count);
	}

	/**
	 * @covers Box\StoreStatic::delete
	 */
	public function testDelete() {
		$this->assertNull($this->object->delete($this));
		$this->assertNull($this->object->get(Query::create($this)->equals('id', $this->getId())));
	}
	
	/**
	 * @covers Box\StoreStatic::persistAll
	 */
	public function testPersistAll() {
		$doc = new DataObjectCollection(
			array(
				new self(),
				new self(),
				new self()
			)	
		);
		
		$this->assertNull($this->object->persistAll($doc));
		
		return $doc;
	}
	
	/**
	 * @covers Box\StoreStatic::getAll
	 * @depends testPersistAll
	 */
	public function testGetAll(DataObjectCollection $doc) {
		$this->assertCount(2, $this->object->getAll(Query::create($this)->in('id', $doc->getIds())->limit(2)));
		return $doc;
	}
	
	/**
	 * @covers Box\StoreStatic::deleteAll
	 * @depends testGetAll
	 */
	public function testDeleteAll(DataObjectCollection $doc) {
		$this->assertNull($this->object->deleteAll($doc));
		$this->assertCount(0, $this->object->getAll(Query::create($this)->in('id', $doc->getIds())));
	}

	private $_id;

	public function getId() {
		return $this->_id;
	}

	public function setId($id) {
		$this->_id = $id;
		return $this;
	}

	public function toData() {
		return new Data(array('id' => $this->_id));
	}

	public static function fromData(array &$data) {
		$do = new self();
		return $do->setId($data['id']);
	}

}
