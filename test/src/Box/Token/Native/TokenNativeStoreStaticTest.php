<?php
namespace Box;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-03-08 at 15:09:12.
 */
class TokenNativeStoreStaticTest extends \PHPUnit_Framework_TestCase {
	/**
	 * @var TokenNativeStoreStatic
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new TokenNativeStoreStatic;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
	}

	/**
	 * @covers Box\TokenNativeStoreStatic::contains
	 */
	public function testContains() {
		$this->assertInternalType('string', $this->object->equals(new TokenConditionEquals(), null));
	}

	/**
	 * @covers Box\TokenNativeStoreStatic::endsWidth
	 */
	public function testEndsWidth() {
		$this->assertInternalType('string', $this->object->endsWidth(new TokenConditionEndsWith(), null));
	}

	/**
	 * @covers Box\TokenNativeStoreStatic::equals
	 */
	public function testEquals() {
		$this->assertInternalType('string', $this->object->equals(new TokenConditionEquals(), null));
	}

	/**
	 * @covers Box\TokenNativeStoreStatic::greaterThan
	 */
	public function testGreaterThan() {
		$this->assertInternalType('string', $this->object->greaterThan(new TokenConditionGreaterThan(), null));
	}

	/**
	 * @covers Box\TokenNativeStoreStatic::greaterThanOrEquals
	 */
	public function testGreaterThanOrEquals() {
		$this->assertInternalType('string', $this->object->greaterThanOrEquals(new TokenConditionGreaterThanOrEquals(), null));
	}

	/**
	 * @covers Box\TokenNativeStoreStatic::in
	 */
	public function testIn() {
		$this->assertInternalType('string', $this->object->in(new TokenConditionIn(), null));
	}

	/**
	 * @covers Box\TokenNativeStoreStatic::lessThan
	 */
	public function testLessThan() {
		$this->assertInternalType('string', $this->object->lessThan(new TokenConditionLessThan(), null));
	}

	/**
	 * @covers Box\TokenNativeStoreStatic::lessThanOrEquals
	 */
	public function testLessThanOrEquals() {
		$this->assertInternalType('string', $this->object->lessThanOrEquals(new TokenConditionLessThanOrEquals(), null));
	}

	/**
	 * @covers Box\TokenNativeStoreStatic::notEquals
	 */
	public function testNotEquals() {
		$this->assertInternalType('string', $this->object->notEquals(new TokenConditionNotEquals(), null));
	}

	/**
	 * @covers Box\TokenNativeStoreStatic::notIn
	 */
	public function testNotIn() {
		$this->assertInternalType('string', $this->object->notIn(new TokenConditionNotIn(), null));
	}

	/**
	 * @covers Box\TokenNativeStoreStatic::startsWith
	 */
	public function testStartsWith() {
		$this->assertInternalType('string', $this->object->startsWith(new TokenConditionStartsWith(), null));
	}

	/**
	 * @covers Box\TokenNativeStoreStatic::andOperator
	 */
	public function testAndOperator() {
		$this->assertInternalType('string', $this->object->andOperator(new TokenOperationAnd(), null));
	}

	/**
	 * @covers Box\TokenNativeStoreStatic::andSubOperator
	 */
	public function testAndSubOperator() {
		$this->assertInternalType('string', $this->object->andSubOperator(new TokenOperationAndSub(), null));
	}

	/**
	 * @covers Box\TokenNativeStoreStatic::orOperator
	 */
	public function testOrOperator() {
		$this->assertInternalType('string', $this->object->orOperator(new TokenOperationOr(), null));
	}

	/**
	 * @covers Box\TokenNativeStoreStatic::orSubOperator
	 */
	public function testOrSubOperator() {
		$this->assertInternalType('string', $this->object->orSubOperator(new TokenOperationOrSub(), null));
	}

	/**
	 * @covers Box\TokenNativeStoreStatic::limit
	 */
	public function testLimit() {
		$this->assertInternalType('string', $this->object->limit(new TokenLimit(), null));
	}

	/**
	 * @covers Box\TokenNativeStoreStatic::offset
	 */
	public function testOffset() {
		$this->assertInternalType('string', $this->object->offset(new TokenOffset(), null));
	}

	/**
	 * @covers Box\TokenNativeStoreStatic::orderBy
	 */
	public function testOrderBy() {
		$this->assertInternalType('string', $this->object->orderBy(new TokenOrderBy(), null));
	}

	/**
	 * @covers Box\TokenNativeStoreStatic::root
	 */
	public function testRoot() {
		$this->assertInternalType('string', $this->object->root(new TokenRoot(), null));
	}
}
