<?php

namespace Box;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-03-08 at 15:09:07.
 */
class QueryConditionTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var QueryCondition
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new QueryCondition();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
	}

	/**
	 * @covers Box\QueryCondition::__construct
	 */
	public function testConstruct() {
		$this->assertTrue(new QueryCondition() instanceof QueryCondition);
	}

	/**
	 * @covers Box\QueryCondition::contains
	 */
	public function testContains() {
		$op = $this->object->contains('property', 'value', false);
		$this->assertTrue($op instanceof QueryOperation);

		$op = $this->object->contains('property2', 'value2', true);
		$this->assertTrue($op instanceof QueryOperation);
	}

	/**
	 * @covers Box\QueryCondition::endsWith
	 */
	public function testEndsWith() {
		$op = $this->object->endsWith('property', 'value', false);
		$this->assertTrue($op instanceof QueryOperation);

		$op = $this->object->endsWith('property2', 'value2', true);
		$this->assertTrue($op instanceof QueryOperation);
	}

	/**
	 * @covers Box\QueryCondition::startsWith
	 */
	public function testStartsWith() {
		$op = $this->object->startsWith('property', 'value', false);
		$this->assertTrue($op instanceof QueryOperation);

		$op = $this->object->startsWith('property2', 'value2', true);
		$this->assertTrue($op instanceof QueryOperation);
	}

	/**
	 * @covers Box\QueryCondition::equals
	 */
	public function testEquals() {
		$op = $this->object->equals('property', 'value');
		$this->assertTrue($op instanceof QueryOperation);

		$op = $this->object->equals('property2', 42);
		$this->assertTrue($op instanceof QueryOperation);
	}

	/**
	 * @covers Box\QueryCondition::notEquals
	 */
	public function testNotEquals() {
		$op = $this->object->notEquals('property', 'value');
		$this->assertTrue($op instanceof QueryOperation);

		$op = $this->object->notEquals('property2', 42);
		$this->assertTrue($op instanceof QueryOperation);
	}

	/**
	 * @covers Box\QueryCondition::greaterThan
	 */
	public function testGreaterThan() {
		$op = $this->object->greaterThan('property', 'value');
		$this->assertTrue($op instanceof QueryOperation);

		$op = $this->object->greaterThan('property2', 42);
		$this->assertTrue($op instanceof QueryOperation);
	}

	/**
	 * @covers Box\QueryCondition::greaterThanOrEquals
	 */
	public function testGreaterThanOrEquals() {
		$op = $this->object->greaterThanOrEquals('property', 'value');
		$this->assertTrue($op instanceof QueryOperation);

		$op = $this->object->greaterThanOrEquals('property2', 42);
		$this->assertTrue($op instanceof QueryOperation);
	}

	/**
	 * @covers Box\QueryCondition::lessThan
	 */
	public function testLessThan() {
		$op = $this->object->lessThan('property', 'value');
		$this->assertTrue($op instanceof QueryOperation);

		$op = $this->object->lessThan('property2', 42);
		$this->assertTrue($op instanceof QueryOperation);
	}

	/**
	 * @covers Box\QueryCondition::lessThanOrEquals
	 */
	public function testLessThanOrEquals() {
		$op = $this->object->lessThanOrEquals('property', 'value');
		$this->assertTrue($op instanceof QueryOperation);

		$op = $this->object->lessThanOrEquals('property2', 42);
		$this->assertTrue($op instanceof QueryOperation);
	}

	/**
	 * @covers Box\QueryCondition::in
	 */
	public function testIn() {
		$op = $this->object->in('property', array('value'));
		$this->assertTrue($op instanceof QueryOperation);

		$op = $this->object->in('property2', array('value', 42, 'face'));
		$this->assertTrue($op instanceof QueryOperation);
	}

	/**
	 * @covers Box\QueryCondition::notIn
	 */
	public function testNotIn() {
		$op = $this->object->notIn('property', array('value'));
		$this->assertTrue($op instanceof QueryOperation);

		$op = $this->object->notIn('property2', array('value', 42, 'face'));
		$this->assertTrue($op instanceof QueryOperation);
	}
}
