<?php
namespace Box;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-03-08 at 15:09:08.
 */
class QuerySubConditionTest extends \PHPUnit_Framework_TestCase {
	/**
	 * @var QuerySubCondition
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = QuerySubCondition::create();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
	}

	/**
	 * @covers Box\QuerySubCondition::create
	 */
	public function testCreate() {
		$this->assertTrue(QuerySubCondition::create() instanceof QuerySubCondition);
	}

	/**
	 * @covers Box\QuerySubCondition::getToken
	 */
	public function testGetToken() {
		$this->assertNull($this->object->getToken());

		$sub = QuerySubCondition::create()->endsWith('property', 'value');
		$this->assertTrue($sub->getToken() instanceof TokenBase);
	}

	/**
	 * @covers Box\QuerySubCondition::contains
	 */
	public function testContains() {
		$this->assertTrue($this->object->contains('property', 'value') instanceof QueryOperation);
	}

	/**
	 * @covers Box\QuerySubCondition::endsWith
	 */
	public function testEndsWith() {
		$this->assertTrue($this->object->endsWith('property', 'value', false) instanceof QueryOperation);
		$this->assertTrue($this->object->endsWith('property', 'value', true) instanceof QueryOperation);
	}

	/**
	 * @covers Box\QuerySubCondition::startsWith
	 */
	public function testStartsWith() {
		$this->assertTrue($this->object->startsWith('property', 'value', false) instanceof QueryOperation);
		$this->assertTrue($this->object->startsWith('property', 'value', true) instanceof QueryOperation);
	}

	/**
	 * @covers Box\QuerySubCondition::equals
	 */
	public function testEquals() {
		$this->assertTrue($this->object->equals('property', 'value') instanceof QueryOperation);
		$this->assertTrue($this->object->equals('property', 42) instanceof QueryOperation);
	}

	/**
	 * @covers Box\QuerySubCondition::notEquals
	 */
	public function testNotEquals() {
		$this->assertTrue($this->object->notEquals('property', 'value') instanceof QueryOperation);
		$this->assertTrue($this->object->notEquals('property', 42) instanceof QueryOperation);
	}

	/**
	 * @covers Box\QuerySubCondition::greaterThan
	 */
	public function testGreaterThan() {
		$this->assertTrue($this->object->greaterThan('property', 42) instanceof QueryOperation);
		$this->assertTrue($this->object->greaterThan('property', 42.42) instanceof QueryOperation);
	}

	/**
	 * @covers Box\QuerySubCondition::greaterThanOrEquals
	 */
	public function testGreaterThanOrEquals() {
		$this->assertTrue($this->object->greaterThanOrEquals('property', 42) instanceof QueryOperation);
		$this->assertTrue($this->object->greaterThanOrEquals('property', 42.42) instanceof QueryOperation);
	}

	/**
	 * @covers Box\QuerySubCondition::lessThan
	 */
	public function testLessThan() {
		$this->assertTrue($this->object->lessThan('property', 42) instanceof QueryOperation);
		$this->assertTrue($this->object->lessThan('property', 42.42) instanceof QueryOperation);
	}

	/**
	 * @covers Box\QuerySubCondition::lessThanOrEquals
	 */
	public function testLessThanOrEquals() {
		$this->assertTrue($this->object->lessThanOrEquals('property', 42) instanceof QueryOperation);
		$this->assertTrue($this->object->lessThanOrEquals('property', 42.42) instanceof QueryOperation);
	}

	/**
	 * @covers Box\QuerySubCondition::in
	 */
	public function testIn() {
		$this->assertTrue($this->object->in('property', array(42)) instanceof QueryOperation);
		$this->assertTrue($this->object->in('property', array()) instanceof QueryOperation);
	}

	/**
	 * @covers Box\QuerySubCondition::notIn
	 */
	public function testNotIn() {
		$this->assertTrue($this->object->notIn('property', array(42)) instanceof QueryOperation);
		$this->assertTrue($this->object->notIn('property', array()) instanceof QueryOperation);
	}
}
